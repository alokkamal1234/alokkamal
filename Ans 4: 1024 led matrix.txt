/*
Here i'm using Arduino IDE for coading.And the matrix contains 16 rows and 64 columns are there,
Also using multipelxing shifting resister, and total 8 shift resisters are used to controll the 1024 leds.

*/
//This is for character A
#define print_A {
B00111100,B01100110,B01100110,B01100110,
B01100110,B01100110,B01111110,B01111110,
B01100110,B01100110,B01100110,B01100110,
B01100110,B01100110,B01100110,B01100110
}
//This is for character L
#define print_L {
B11110000,B11110000,B11110000,B11110000,
B11110000,B11110000,B11110000,B11110000,
B11110000,B11110000,B11110000,B11111111,
B11111111,B11111111,B11111111,B11111111 
}
//This is for character o
#define print_o {
B00111100,B01111110,B11111111,B11111111,
B11111111,B11100111,B11100111,B11100111,
B11100111,B11100111,B11100111,B11111111,
B11111111,B11111111,B01111110,B00111100
}
//This is for character K
#define print_K {
B11100000,B11100001,B11100011,B11100111,
B11101111,B11110111,B00100100,B00001100,
B11100110,B11100100,B11100010,B11100000,
B11100110,B11100000,B11100000,B11100000
}
int latchPin = 10;
int clockPin = 13;
int dataPin = 11;
int clock = 9;
int Reset = 8;
int latchPinPORTB = latchPin - 8;
int clockPinPORTB = clockPin - 8;
int dataPinPORTB = dataPin - 8;
int i = 0;
long scrolling_word[16];
int array_turn=0;
// Taking 64 columns and 16 rows, so here total no of leds are 1024 andeach row contains 64 led
byte your_text[64][16]={A,L,O,K};


void setup(){
  Serial.begin(9600);
  pinMode(dataPin,OUTPUT);
  pinMode(clockPin,OUTPUT);
  pinMode(latchPin,OUTPUT);
  pinMode(clock,OUTPUT);
  pinMode(Reset,OUTPUT);
  digitalWrite(Reset,HIGH);
  digitalWrite(Reset,LOW);
  setupSPI();
}

void display_word(int loops,byte word_print[][16],int num_patterns,int delay_langth){
  i = 0;// resets the counter fot the 4017
  for(int g=0;g<16;g++)//resets the the long int where your word goes
    scrolling_word[g] = 0;
  for(int x=0;x<num_patterns;x++){
   for(int r=0;r<16;r++){scrolling_word[r] |= word_print[x][r]; 
    for (int z=0;z<16;z++){//the sctolling action
        for(int p=0;p<16;p++)
          scrolling_word[p] = scrolling_word[p] << 1;
// end of the scrolling funcion
      for(int t=0;t<delay_langth;t++){// delay function, it just loops over the same display
        for(int y=0;y<16;y++){// scaning the display
          if(i == 16){// counting up to 6 with the 4017
            digitalWrite(Reset,HIGH);
            digitalWrite(Reset,LOW);
            i = 0;
          }
          latchOff();
          spi_transfer(make_word(0x01000000,y));// sending the data
          spi_transfer(make_word(0x00010000,y));
          spi_transfer(make_word(0x00000100,y));
          latchOn();
          delayMicroseconds(1000);
          latchOff();
          spi_transfer(0);// clearing the data
          spi_transfer(0);
          spi_transfer(0);
          latchOn();
          digitalWrite(clock,HIGH);//counting up with the 4017
          digitalWrite(clock,LOW);
          i++;
        }
      }
    }
  }
  finish_scroll(delay_langth);
}

void finish_scroll(int delay_scroll){
  for (int n=0;n<64;n++){
    }
        for(int h=0;h<16;h++)
          scrolling_word[h] = scrolling_word[h] << 1;
      for(int w=0;w<delay_scroll;w++){
        for(int z=0;z<16;z++){
          if(i == 16){
            digitalWrite(Reset,HIGH);
            digitalWrite(Reset,LOW);
            i = 0;
          }
          latchOff();
          spi_transfer(make_word(0x01000000,z));
          spi_transfer(make_word(0x00010000,z));
          spi_transfer(make_word(0x00000100,z));
          latchOn();
          delayMicroseconds(1000);
          latchOff();
          spi_transfer(0);
          spi_transfer(0);
          spi_transfer(0);
          latchOn();
          digitalWrite(clock,HIGH);
          digitalWrite(clock,LOW);
          i++;
        }
      }
    }
}

byte make_word (long posistion,byte turn){
  byte dummy_word = 0;
  for(int q=0;q<64;q++){
    if(scrolling_word[turn] & (posistion<<q))
      dummy_word |= 0x01<<q;
  }
  return dummy_word;
}   


void loop() {

     display_word(1,your_text,64,4);// calls for the display_pattern.
}
  
  

void latchOn(){
  bitSet(PORTB,latchPinPORTB);
}

void latchOff(){
  bitClear(PORTB,latchPinPORTB);
}


void setupSPI(){
  byte clr;
  SPCR |= ( (1<<SPE) | (1<<MSTR) ); // enable SPI as master
  //SPCR |= ( (1<<SPR1) | (1<<SPR0) ); // set prescaler bits
  SPCR &= ~( (1<<SPR1) | (1<<SPR0) ); // clear prescaler bits
  clr=SPSR; // clear SPI status reg
  clr=SPDR; // clear SPI data reg
  SPSR |= (1<<SPI2X); // set prescaler bits
  //SPSR &= ~(1<<SPI2X); // clear prescaler bits

  delay(10);
}
byte spi_transfer(byte data)
{
  SPDR = data;        // Start the transmission
  while (!(SPSR & (1<<SPIF)))     // Wait the end of the transmission
  {
  };
  return SPDR;        // return the received byte, we don't need that
}



